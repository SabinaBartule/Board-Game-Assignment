Protocol: SingleSignOn 

Types: Agent User,Bank,nemId;
       Number NUser,NBank,WebsiteData,MFA;
       Symmetric_key KUserBank;
       Function sk,auth,swipe

Knowledge: User: User,Bank,nemId,sk(User, nemId),auth(User,nemId),swipe;
	  Bank: User,Bank,nemId,sk(Bank, nemId);
	  nemId: User,Bank,nemId,sk(User,nemId),sk(Bank,nemId),auth(User,nemId),swipe;

Actions:
# Initial
User->Bank: User,Bank,NUser
Bank->User: User,Bank,nemId,NBank
User->nemId:{| User,Bank,nemId,NUser |}sk(User,nemId)
# 2 factor auth
nemId->User: {| nemId,User,MFA |}auth(User,nemId)
User->nemId: {| User,nemId,swipe(MFA) |}auth(User,nemId)
# nemId creates the KUserBank key
nemId->User:{| KUserBank,Bank, {| KUserBank,User,nemId |}sk(Bank,nemId) |}sk(User,nemId)
# User share the KUserBank key with the bank
User->Bank:{| KUserBank,User,nemId |}sk(Bank,nemId)
# Bank sends the data the User wants
Bank->User:{| WebsiteData |}KUserBank


Goals:
User authenticates nemId on MFA
Bank authenticates User on WebsiteData
User authenticates Bank on KUserBank 
KUserBank secret between Bank,User
MFA secret between User, nemId


#let client(user) generate key and send it to SP(Bank website) encrypted

